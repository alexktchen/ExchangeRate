// Generated by Apple Swift version 2.0 (swiftlang-700.0.59 clang-700.0.72)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"


/// This is base class for holding XML structure.
///
/// You can access its structure by using subscript like this:
/// <code>element["foo"]["bar"]
/// </code> would return <code><bar></bar>
/// </code> element from <code><element><foo><bar></bar></foo></element>
/// </code> XML as an <code>AEXMLElement
/// </code> object.
SWIFT_CLASS("_TtC12ExchangeRate12AEXMLElement")
@interface AEXMLElement : NSObject

/// Every AEXMLElement should have its parent element instead of AEXMLDocument which parent is nil.
@property (nonatomic, readonly, weak) AEXMLElement * __nullable parent;

/// Child XML elements.
@property (nonatomic, readonly, copy) NSArray<AEXMLElement *> * __nonnull children;

/// XML Element name (defaults to empty string).
@property (nonatomic, copy) NSString * __nonnull name;

/// XML Element value.
@property (nonatomic, copy) NSString * __nullable value;

/// XML Element attributes (defaults to empty dictionary).
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * __nonnull attributes;

/// String representation of value property (if value is nil this is empty String).
@property (nonatomic, readonly, copy) NSString * __nonnull stringValue;

/// String representation of value property with special characters escaped (if value is nil this is empty String).
@property (nonatomic, readonly, copy) NSString * __nonnull escapedStringValue;

/// Boolean representation of value property (if value is "true" or 1 this is True, otherwise False).
@property (nonatomic, readonly) BOOL boolValue;

/// Integer representation of value property (this is 0 if value can't be represented as Integer).
@property (nonatomic, readonly) NSInteger intValue;

/// Double representation of value property (this is 0.00 if value can't be represented as Double).
@property (nonatomic, readonly) double doubleValue;

/// Designated initializer - all parameters are optional.
///
/// :param: name XML element name.
/// :param: value XML element value
/// :param: attributes XML element attributes
///
/// :returns: An initialized <code>AEXMLElement
/// </code> object.
- (nonnull instancetype)init:(NSString * __nullable)name value:(NSString * __nullable)value attributes:(NSDictionary<NSString *, NSString *> * __nullable)attributes OBJC_DESIGNATED_INITIALIZER;

/// This element name is used when unable to find element.
+ (NSString * __nonnull)errorElementName;
- (AEXMLElement * __nonnull)objectForKeyedSubscript:(NSString * __nonnull)key;

/// Returns all of the elements with equal name as self (nil if not exists).
@property (nonatomic, readonly, copy) NSArray<AEXMLElement *> * __nullable all;

/// Returns the first element with equal name as self (nil if not exists).
@property (nonatomic, readonly) AEXMLElement * __nullable first;

/// Returns the last element with equal name as self (nil if not exists).
@property (nonatomic, readonly) AEXMLElement * __nullable last;

/// Returns number of all elements with equal name as self.
@property (nonatomic, readonly) NSInteger count;

/// Returns all elements with given value.
///
/// :param: value XML element value.
///
/// :returns: Optional Array of found XML elements.
- (NSArray<AEXMLElement *> * __nullable)allWithValue:(NSString * __nonnull)value;

/// Returns all elements with given attributes.
///
/// :param: attributes Dictionary of Keys and Values of attributes.
///
/// :returns: Optional Array of found XML elements.
- (NSArray<AEXMLElement *> * __nullable)allWithAttributes:(NSDictionary<NSString *, NSString *> * __nonnull)attributes;

/// Adds child XML element to self.
///
/// :param: child Child XML element to add.
///
/// :returns: Child XML element with <code>self
/// </code> as <code>parent
/// </code>.
- (AEXMLElement * __nonnull)addChild:(AEXMLElement * __nonnull)child;

/// Adds child XML element to self.
///
/// :param: name Child XML element name.
/// :param: value Child XML element value.
/// :param: attributes Child XML element attributes.
///
/// :returns: Child XML element with <code>self
/// </code> as <code>parent
/// </code>.
- (AEXMLElement * __nonnull)addChildWithName:(NSString * __nonnull)name value:(NSString * __nullable)value attributes:(NSDictionary<NSString *, NSString *> * __nullable)attributes;

/// Removes self from parent XML element.
- (void)removeFromParent;

/// Complete hierarchy of self and children in XML escaped and formatted String
@property (nonatomic, readonly, copy) NSString * __nonnull xmlString;
@end

@class NSData;


/// This class is inherited from AEXMLElement and has a few addons to represent XML Document.
///
/// XML Parsing is also done with this object.
SWIFT_CLASS("_TtC12ExchangeRate13AEXMLDocument")
@interface AEXMLDocument : AEXMLElement

/// This is only used for XML Document header (default value is 1.0).
@property (nonatomic, readonly) double version;

/// This is only used for XML Document header (default value is "utf-8").
@property (nonatomic, readonly, copy) NSString * __nonnull encoding;

/// This is only used for XML Document header (default value is "no").
@property (nonatomic, readonly, copy) NSString * __nonnull standalone;

/// Root (the first child element) element of XML Document (AEXMLError element if not exists).
@property (nonatomic, readonly) AEXMLElement * __nonnull root;

/// Designated initializer - Creates and returns XML Document object.
///
/// :param: version Version value for XML Document header (defaults to 1.0).
/// :param: encoding Encoding value for XML Document header (defaults to "utf-8").
/// :param: standalone Standalone value for XML Document header (defaults to "no").
/// :param: root Root XML element for XML Document (defaults to <code>nil
/// </code>).
///
/// :returns: An initialized XML Document object.
- (nonnull instancetype)initWithVersion:(double)version encoding:(NSString * __nonnull)encoding standalone:(NSString * __nonnull)standalone root:(AEXMLElement * __nullable)root OBJC_DESIGNATED_INITIALIZER;

/// Convenience initializer - used for parsing XML data (by calling loadXMLData: internally).
///
/// :param: version Version value for XML Document header (defaults to 1.0).
/// :param: encoding Encoding value for XML Document header (defaults to "utf-8").
/// :param: standalone Standalone value for XML Document header (defaults to "no").
/// :param: xmlData XML data to parse.
/// :param: error If there is an error reading in the data, upon return contains an <code>NSError
/// </code> object that describes the problem.
///
/// :returns: An initialized XML Document object containing the parsed data. Returns <code>nil
/// </code> if the data could not be parsed.
- (nullable instancetype)initWithVersion:(double)version encoding:(NSString * __nonnull)encoding standalone:(NSString * __nonnull)standalone xmlData:(NSData * __nonnull)xmlData error:(NSError * __nullable * __null_unspecified)error;

/// Creates instance of AEXMLParser (private class which is simple wrapper around NSXMLParser) and starts parsing the given XML data.
///
/// :param: data XML which should be parsed.
///
/// :returns: <code>NSError
/// </code> if parsing is not successfull, otherwise <code>nil
/// </code>.
- (BOOL)loadXMLData:(NSData * __nonnull)data error:(NSError * __nullable * __null_unspecified)error;

/// Override of xmlString property of AEXMLElement - it just inserts XML Document header at the beginning.
@property (nonatomic, readonly, copy) NSString * __nonnull xmlString;
@end


@class UIWindow;
@class UIApplication;
@class NSURL;
@class NSManagedObjectModel;
@class NSPersistentStoreCoordinator;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC12ExchangeRate11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic) UIWindow * __nullable window;
- (BOOL)application:(UIApplication * __nonnull)application didFinishLaunchingWithOptions:(NSDictionary * __nullable)launchOptions;
- (void)applicationWillResignActive:(UIApplication * __nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * __nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * __nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * __nonnull)application;
- (void)applicationWillTerminate:(UIApplication * __nonnull)application;
@property (nonatomic) NSURL * __nonnull applicationDocumentsDirectory;
@property (nonatomic) NSManagedObjectModel * __nonnull managedObjectModel;
@property (nonatomic) NSPersistentStoreCoordinator * __nullable persistentStoreCoordinator;
@property (nonatomic) NSManagedObjectContext * __nullable managedObjectContext;
- (void)saveContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSCoder;

SWIFT_CLASS("_TtC12ExchangeRate27BackgroundHighlightedButton")
@interface BackgroundHighlightedButton : UIButton
@property (nonatomic) UIColor * __nullable highlightedBackgroundColor;
@property (nonatomic) UIColor * __nullable nonHighlightedBackgroundColor;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

@class NSError;

SWIFT_CLASS("_TtC12ExchangeRate11BaseRequest")
@interface BaseRequest : NSObject
- (void)request:(NSString * __nonnull)url completionHandler:(void (^ __nonnull)(NSData * __nullable, NSError * __nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@class UIImage;

SWIFT_CLASS("_TtC12ExchangeRate8Currency")
@interface Currency : NSObject
@property (nonatomic) NSDate * __nullable dateTime;
@property (nonatomic, copy) NSString * __nonnull dollarsName;
@property (nonatomic) BOOL isMajor;
@property (nonatomic, copy) NSString * __nonnull price;
@property (nonatomic, copy) NSString * __nonnull symbol;
@property (nonatomic, copy) NSString * __nonnull ts;
@property (nonatomic, copy) NSString * __nonnull type;
@property (nonatomic, copy) NSString * __nonnull utctime;
@property (nonatomic, copy) NSString * __nonnull volume;
@property (nonatomic, copy) NSString * __nonnull displayName;
@property (nonatomic, copy) NSString * __nonnull currencyCode;
@property (nonatomic, copy) NSString * __nonnull country;
@property (nonatomic) UIImage * __nullable flagImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12ExchangeRate15CurrencyRequest")
@interface CurrencyRequest : NSObject <NSXMLParserDelegate>
- (void)getCurrency:(NSString * __nonnull)majorCode currencys:(NSArray<Currency *> * __nonnull)currencys completionHandler:(void (^ __nonnull)(NSArray<Currency *> * __nullable))completionHandler;
- (void)parseCurrency:(NSArray<Currency *> * __nonnull)currencys data:(NSData * __nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIImageView;

SWIFT_CLASS("_TtC12ExchangeRate17MainTableViewCell")
@interface MainTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified displayNameLabel;
@property (nonatomic, weak) IBOutlet UIImageView * __null_unspecified flagImage;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified priceLabel;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified currencyLabel;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified symbolLabel;
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end


@interface NSLocale (SWIFT_EXTENSION(ExchangeRate))
+ (NSString * __nullable)locales:(NSString * __nonnull)code;
+ (NSString * __nullable)localesCurrencyCode:(NSString * __nonnull)code;
+ (NSString * __nullable)localesCurrencySymbol:(NSString * __nonnull)code;
@end


@interface UIColor (SWIFT_EXTENSION(ExchangeRate))
- (nonnull instancetype)initWithRgba:(NSString * __nonnull)rgba;
@end

@class UITableView;
@class NSIndexPath;
@class UIBarButtonItem;
@class UIView;
@class NSBundle;

SWIFT_CLASS("_TtC12ExchangeRate14ViewController")
@interface ViewController : UIViewController <UIScrollViewDelegate, UITableViewDelegate, UITableViewDataSource>
@property (nonatomic, weak) IBOutlet UIBarButtonItem * __null_unspecified barItemEdit;
@property (nonatomic, weak) IBOutlet UITableView * __null_unspecified tableView;
@property (nonatomic, weak) IBOutlet UIImageView * __null_unspecified topFlagImage;
@property (nonatomic, weak) IBOutlet UIView * __null_unspecified titleView;
@property (nonatomic, copy) NSArray<Currency *> * __nonnull currencys;
- (IBAction)edit:(id __nonnull)sender;
- (void)viewDidLoad;
- (void)loadData;
- (void)didReceiveMemoryWarning;
- (NSInteger)numberOfSectionsInTableView:(UITableView * __nonnull)tableView;
- (NSInteger)tableView:(UITableView * __nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * __nonnull)tableView:(UITableView * __nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)tableView:(UITableView * __nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (BOOL)tableView:(UITableView * __nonnull)tableView canMoveRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)tableView:(UITableView * __nonnull)tableView moveRowAtIndexPath:(NSIndexPath * __nonnull)fromIndexPath toIndexPath:(NSIndexPath * __nonnull)toIndexPath;
- (void)selectItem:(Currency * __nonnull)item;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
